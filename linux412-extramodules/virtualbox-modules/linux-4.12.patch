Index: trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
===================================================================
--- a/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
+++ b/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
@@ -903,4 +903,7 @@
     {
         pgd_t       Global;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
+        p4d_t       Four;
+#endif
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
         pud_t       Upper;
@@ -918,10 +921,24 @@
     if (RT_UNLIKELY(pgd_none(u.Global)))
         return NULL;
-
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
+    u.Four  = *p4d_offset(&u.Global, ulAddr);
+    if (RT_UNLIKELY(p4d_none(u.Four)))
+        return NULL;
+    if (p4d_large(u.Four))
+    {
+        pPage = p4d_page(u.Four);
+        AssertReturn(pPage, NULL);
+        pfn   = page_to_pfn(pPage);      /* doing the safe way... */
+        AssertCompile(P4D_SHIFT - PAGE_SHIFT < 31);
+        pfn  += (ulAddr >> PAGE_SHIFT) & ((UINT32_C(1) << (P4D_SHIFT - PAGE_SHIFT)) - 1);
+        return pfn_to_page(pfn);
+    }
+    u.Upper = *pud_offset(&u.Four, ulAddr);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
     u.Upper = *pud_offset(&u.Global, ulAddr);
+#endif
     if (RT_UNLIKELY(pud_none(u.Upper)))
         return NULL;
-# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
     if (pud_large(u.Upper))
     {
@@ -932,6 +949,6 @@
         return pfn_to_page(pfn);
     }
-# endif
-
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
     u.Middle = *pmd_offset(&u.Upper, ulAddr);
 #else  /* < 2.6.11 */
Index: trunk/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
===================================================================
--- a/trunk/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
+++ b/trunk/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
@@ -160,4 +160,9 @@
 #endif
 
+/* for set_pages_x() */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
+# include <asm/set_memory.h>
+#endif
+
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 7, 0)
 # include <asm/smap.h>
Index: trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
===================================================================
--- a/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
+++ b/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
@@ -938,6 +938,8 @@
     u.Upper = *pud_offset(&u.Global, ulAddr);
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
     if (RT_UNLIKELY(pud_none(u.Upper)))
         return NULL;
+#endif
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
     if (pud_large(u.Upper))
Index: trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
===================================================================
--- a/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
+++ b/trunk/src/VBox/Runtime/r0drv/linux/memobj-r0drv-linux.c
@@ -921,5 +921,6 @@
     if (RT_UNLIKELY(pgd_none(u.Global)))
         return NULL;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
     u.Four  = *p4d_offset(&u.Global, ulAddr);
     if (RT_UNLIKELY(p4d_none(u.Four)))
@@ -935,12 +936,10 @@
     }
     u.Upper = *pud_offset(&u.Four, ulAddr);
-#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
+# else /* < 4.12 */
     u.Upper = *pud_offset(&u.Global, ulAddr);
-#endif
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
+# endif /* < 4.12 */
     if (RT_UNLIKELY(pud_none(u.Upper)))
         return NULL;
-#endif
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
     if (pud_large(u.Upper))
     {
@@ -951,6 +950,5 @@
         return pfn_to_page(pfn);
     }
-#endif
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 11)
+# endif
     u.Middle = *pmd_offset(&u.Upper, ulAddr);
 #else  /* < 2.6.11 */
