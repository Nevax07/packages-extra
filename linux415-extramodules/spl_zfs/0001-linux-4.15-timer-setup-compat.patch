From: Colin Ian King <colin.king@canonical.com>
Date: TUe, 12 Dec 2017 10:12:13 +0000
Subject: [PATCH] Linux 4.15 timer setup compat

Linux 4.15 introduces a new timer_setup API and removes init_timer
so add a compat for these API changes.

Signed-off-by: Colin Ian King <colin.king@canonical.com>
---

diff --git a/config/spl-build.m4 b/config/spl-build.m4
index accf6759bfbe..3b1a49522a09 100644
--- a/config/spl-build.m4
+++ b/config/spl-build.m4
@@ -56,6 +56,7 @@ AC_DEFUN([SPL_AC_CONFIG_KERNEL], [
 	SPL_AC_WAIT_QUEUE_HEAD_ENTRY
 	SPL_AC_KERNEL_WRITE
 	SPL_AC_KERNEL_READ
+	SPL_AC_TIMER_SETUP
 ])
 
 AC_DEFUN([SPL_AC_MODULE_SYMVERS], [
@@ -1755,3 +1756,27 @@ AC_DEFUN([SPL_AC_KERNEL_READ], [
 	])
 	EXTRA_KCFLAGS="$tmp_flags"
 ])
+
+dnl #
+dnl # 4.16 new API
+dnl # new timer_setup()
+dnl #
+AC_DEFUN([SPL_AC_TIMER_SETUP], [
+	AC_MSG_CHECKING([whether timer_setup() exists])
+	tmp_flags="$EXTRA_KCFLAGS"
+        EXTRA_KCFLAGS="-Werror"
+	SPL_LINUX_TRY_COMPILE([
+                #include <linux/timer.h>
+        ],[
+		struct timer_list timer;
+
+		timer_setup(&timer, NULL, 0);
+        ],[
+                AC_MSG_RESULT(yes)
+                AC_DEFINE(HAVE_KERNEL_TIMER_SETUP, 1,
+                    [use timer_setup() for timer initialization])
+        ],[
+                AC_MSG_RESULT(no)
+        ])
+        EXTRA_KCFLAGS="$tmp_flags"
+])
diff --git a/module/spl/spl-taskq.c b/module/spl/spl-taskq.c
index 86915e62f225..4b7b3f7ce22d 100644
--- a/module/spl/spl-taskq.c
+++ b/module/spl/spl-taskq.c
@@ -209,9 +209,17 @@ task_done(taskq_t *tq, taskq_ent_t *t)
  * add it to the priority list in order for immediate processing.
  */
 static void
+#ifdef HAVE_KERNEL_TIMER_SETUP
+task_expire(struct timer_list *tl)
+#else
 task_expire(unsigned long data)
+#endif
 {
+#ifdef HAVE_KERNEL_TIMER_SETUP
+	taskq_ent_t *w, *t = (taskq_ent_t *)from_timer(t, tl, tqent_timer);
+#else
 	taskq_ent_t *w, *t = (taskq_ent_t *)data;
+#endif
 	taskq_t *tq = t->tqent_taskq;
 	struct list_head *l;
 	unsigned long flags;
@@ -590,8 +598,12 @@ taskq_dispatch(taskq_t *tq, task_func_t func, void *arg, uint_t flags)
 	t->tqent_func = func;
 	t->tqent_arg = arg;
 	t->tqent_taskq = tq;
+#ifdef HAVE_KERNEL_TIMER_SETUP
+	timer_setup(&t->tqent_timer, NULL, 0);
+#else
 	t->tqent_timer.data = 0;
 	t->tqent_timer.function = NULL;
+#endif
 	t->tqent_timer.expires = 0;
 	t->tqent_birth = jiffies;
 
@@ -640,8 +652,12 @@ taskq_dispatch_delay(taskq_t *tq, task_func_t func, void *arg,
 	t->tqent_func = func;
 	t->tqent_arg = arg;
 	t->tqent_taskq = tq;
+#ifdef HAVE_KERNEL_TIMER_SETUP
+	timer_setup(&t->tqent_timer, task_expire, 0);
+#else
 	t->tqent_timer.data = (unsigned long)t;
 	t->tqent_timer.function = task_expire;
+#endif
 	t->tqent_timer.expires = (unsigned long)expire_time;
 	add_timer(&t->tqent_timer);
 
@@ -732,7 +748,11 @@ taskq_init_ent(taskq_ent_t *t)
 {
 	spin_lock_init(&t->tqent_lock);
 	init_waitqueue_head(&t->tqent_waitq);
+#ifdef HAVE_KERNEL_TIMER_SETUP
+	timer_setup(&t->tqent_timer, NULL, 0);
+#else
 	init_timer(&t->tqent_timer);
+#endif
 	INIT_LIST_HEAD(&t->tqent_list);
 	t->tqent_id = 0;
 	t->tqent_func = NULL;
